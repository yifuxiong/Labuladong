
class UnionFind {
    // 连通分量个数
    private int count;
    // 存储每个节点的父节点
    private int[] parent;
    // 新增一个数组记录树的“重量”
    private int[] size;

    public UnionFind(int n) {
        count = n;
        parent = new int[n];
        // 最初每棵树只有一个节点
        // 重量应该初始化 1
        size = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    // 将节点p和节点q相通
    public void union(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);

        if (rootP == rootQ) {
            return;
        }

        // parent[rootQ] = rootP;
        // 小树接到大树下面，较平衡
        if (size[rootP] > size[rootQ]) {
            parent[rootQ] = rootP;
            size[rootP] += size[rootQ];
        } else {
            parent[rootP] = parent[rootQ];
            size[rootQ] += size[rootP];
        }

        // 两个连通分量合并成一个连通分量
        count--;
    }

    // 返回节点x的连通分量根节点
    public int find(int x) {
        while (parent[x] != x) {
            // 进行路径压缩
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }

    // 判断节点p和节点q是否连通
    public boolean connected(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);

        return rootP == rootQ;
    }

    // 返回图中的连通分量个数
    public int count() {
        return count;
    }
}

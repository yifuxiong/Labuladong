// ⼆叉树遍历框架
void traverse(TreeNode root) {
    traverse(root.left);
    traverse(root.right);
}
// 根据 学习数据结构和算法的框架思维，
// 完全可以根据⼆叉树的遍历框架改写出⼆维矩阵的 DFS 代码框架：



// ⼆维矩阵遍历框架
void dfs(int[][] grid, int i, int j, boolean[] visited) {
    int m = grid.length, n = grid[0].length;
    if (i < 0 || j < 0 || i >= m || j >= n) {
        // 超出索引边界
        return;
    }
    if (visited[i][j]) {
        // 已遍历过 (i, j)
        return;
    }
    // 进⼊节点 (i, j)
    visited[i][j] = true;
    dfs(grid, i - 1, j, visited); // 上
    dfs(grid, i + 1, j, visited); // 下
    dfs(grid, i, j - 1, visited); // 左
    dfs(grid, i, j + 1, visited); // 右
}
// 因为⼆维矩阵本质上是⼀幅「图」，所以遍历的过程中需要⼀个 visited 布尔数组防⽌⾛回头路，
// 如果你 能理解上⾯这段代码，那么搞定所有岛屿系列题⽬都很简单。



// 这⾥额外说⼀个处理⼆维数组的常⽤⼩技巧，你有时会看到使⽤「⽅向数组」来处理上下左右的遍历，
// 和前 ⽂ 图遍历框架 的代码很类似：

// ⽅向数组，分别代表上、下、左、右
int[][] dirs = new int[][]{{-1,0}, {1,0}, {0,-1}, {0,1}};
void dfs(int[][] grid, int i, int j, boolean[] visited) {
    int m = grid.length, n = grid[0].length;
    if (i < 0 || j < 0 || i >= m || j >= n) {
        // 超出索引边界
        return;
    }
    if (visited[i][j]) {
        // 已遍历过 (i, j)
        return;
    }
    // 进⼊节点 (i, j)
    visited[i][j] = true;
    // 递归遍历上下左右的节点
    for (int[] d : dirs) {
        int next_i = i + d[0];
        int next_j = j + d[1];
        dfs(grid, next_i, next_j, visited);
    }
    // 离开节点 (i, j)
}
// 这种写法⽆⾮就是⽤ for 循环处理上下左右的遍历罢了，你可以按照个⼈喜好选择写法。
